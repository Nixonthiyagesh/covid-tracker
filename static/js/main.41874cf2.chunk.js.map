{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","api/index.js","Components/Countrypicker/Countrypicker.js","Components/Chart/Chart.js","Images/covid-19-img.png","App.js","reportWebVitals.js","index.js","App.module.css","Components/Countrypicker/Countrypicker.module.css","Components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","countryUrl","console","log","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountryData","countries","Countrypicker","handleCountryChange","useState","setCountries","useEffect","fetchCountries","length","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","name","Chart","setDailyData","result","dailyApi","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","options","legend","display","title","text","App","state","countrydata","setState","this","src","Covid","covid","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41874cf2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__-bAry\",\"card\":\"Cards_card__-2tUw\",\"infected\":\"Cards_infected__15cR3\",\"deaths\":\"Cards_deaths__2X9eO\",\"recovered\":\"Cards_recovered__1oFlP\"};","import React from 'react';\r\nimport { Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    //const cardData = data.map((data)=>data);\r\n    if(confirmed){\r\n        return 'Loading....';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent >\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' />\r\n                    </Typography>\r\n                    <Typography  color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Numbber of active cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card,styles.recovered)}>\r\n                <CardContent >\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={recovered.value} duration={2.5} separator=',' />\r\n                    </Typography>\r\n                    <Typography  color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Numbber of recovered cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card,styles.deaths)}>\r\n                <CardContent >\r\n                <Typography  color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={deaths.value} duration={2.5} separator=',' />\r\n                    </Typography>\r\n                    <Typography  color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Numbber of deaths caused by Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (country) => {\r\n    let countryUrl = url;\r\n    if(country && country!=='global'){\r\n        countryUrl= `${url}/countries/${country}`      \r\n    }\r\n    console.log('countryUrl',countryUrl)\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(countryUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) { console.log(error);}\r\n};\r\n\r\nexport default fetchData;\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    console.log(\"data\", data, \"modify\", modifiedData);\r\n\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountryData = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    /* const modifiedData = data.map((countries)=>({\r\n            countries:countries.name\r\n        }))  */\r\n    console.log(\"countries\", countries);\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(\"err\", error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from './Countrypicker.module.css';\r\nimport {fetchCountryData} from '../../api';\r\n\r\nconst Countrypicker = ({handleCountryChange}) => {\r\n    const [countries, setCountries] = useState('');\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            setCountries( await fetchCountryData());\r\n        }\r\n        fetchCountries();\r\n    }, [setCountries])\r\n    if(countries.length===0){\r\n        return 'Loading';\r\n    }\r\n  return (\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n            <option value=\"global\">Global</option>\r\n            {countries?.map((countries,i)=>{return(<option key={i} value={countries.name}>{countries.name}</option>)})}\r\n        </NativeSelect>\r\n      </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countrypicker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({data:{confirmed,deaths,recovered},country}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const dailyApi = async () => {\r\n      const result = await fetchDailyData();\r\n      setDailyData(result);\r\n    };\r\n    dailyApi();\r\n  }, []);\r\n\r\n  const lineChart = (dailyData.length && \r\n    (<Line\r\n      data={{ \r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />) \r\n    );\r\n  console.log('daily',dailyData.map(({ deaths }) => deaths));\r\n   const BarChart = confirmed && (<Bar data={{\r\n     labels:['infected','recovered','deaths'],\r\n     datasets:[{\r\n       label:'people',\r\n       backgroundColor:[\r\n         'rgba(0,0,255,0.5)',\r\n         'rgba(0,255,0,0.5)',\r\n         'rgba(255,0,0,0.5)'\r\n       ],\r\n       data:[confirmed.value,recovered.value,deaths.value]\r\n     }],\r\n   }}\r\n   options={{\r\n     legend:{display:false},\r\n     title:{display:true,text:'Current State in '+country}\r\n   }}\r\n   />)\r\n\r\n  return <div className={styles.container}>{country?BarChart:lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","export default __webpack_public_path__ + \"static/media/covid-19-img.9e5d4fc7.png\";","import React from 'react'\nimport Cards from './Components/Cards/Cards';\nimport Countrypicker from './Components/Countrypicker/Countrypicker';\nimport Chart from './Components/Chart/Chart';\n import styles from './App.module.css';\n import fetchData from './api';\nimport Covid from './Images/covid-19-img.png';\nclass App extends React.Component\n{ \n  state = {\n    data:{},\n    country:''\n  }\n  async componentDidMount(){\n    const result = await fetchData();\n    console.log('didmount',result);\n    this.setState({data:result});\n  }\n  handleCountryChange = async (country)  => {\n    const countrydata = await fetchData(country);\n      this.setState({data:countrydata,country:country })\n      console.log(country);\n\n    }\n  render(){\n    const {data,country}=this.state;\n  return (\n    <div className={styles.container}>\n      <img src={Covid} className={styles.covid} />\n      <Cards data={data}/>\n      <Countrypicker handleCountryChange={this.handleCountryChange}/>\n      <Chart data={data} country={country} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__uqg3n\",\"covid\":\"App_covid__2oWnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Countrypicker_formControl__1YZJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__kixHp\"};"],"sourceRoot":""}